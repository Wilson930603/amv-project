import scrapy,re,json,os,requests,time
from urllib.parse import quote
from crawldata.functions import *
from selenium import webdriver
from webdriver_manager.firefox import GeckoDriverManager
from crawldata.settings import GLASSDOOR_USER,GLASSDOOR_PASSWORD

class CrawlerSpider(scrapy.Spider):
    name = 'glassdoor_salaries'
    start_urls=['https://www.glassdoor.com']
    f=open('../glassdoor_review_2022/urls.txt','r')
    LIST=re.split('\r\n|\n',f.read())
    f.close()
    cookies = {'gdId': 'dd21d13b-9a0b-420f-ad00-bbcac501d232','trs': 'direct:direct:direct:2022-08-15+04%3A46%3A07.271:undefined:undefined','optimizelyEndUserId': 'oeu1660563969690r0.7528168008341631','_ga_RC95PMVB3H': 'GS1.1.1666401410.49.0.1666401410.60.0.0','_ga': 'GA1.2.1080828764.1660563971','_ga_RJF0GNZNXE': 'GS1.1.1666401410.51.0.1666401410.60.0.0','OptanonConsent': 'isGpcEnabled=0&datestamp=Fri+Dec+02+2022+15%3A01%3A06+GMT%2B0700+(Indochina+Time)&version=202211.1.0&isIABGlobal=false&hosts=&consentId=f1ad896b-5a74-40bf-b187-e93ddbd007d7&interactionCount=1&landingPath=NotLandingPage&groups=C0001%3A1%2CC0003%3A1%2CC0002%3A1%2CC0004%3A1%2CC0017%3A1&AwaitingReconsent=false','_optionalConsent': 'true','_rdt_uuid': '1660563972243.160606b6-98a1-49fe-8ced-348708592023','__pdst': '9c410293da4144e68c92c3df6ce4424f','_tt_enable_cookie': '1','_ttp': 'c96ca690-5f2e-4d4a-8f16-4ab4aa78fb6e','amp_a46b8b': '1CHCuLtYIF6ZXpHC9uAEf-.MjAxODE3MjA1..1gdi6fm1t.1gdi6jk3s.48.3k.7s','_pin_unauth': 'dWlkPU9HSTBZV1UxWXprdFpHUmxOQzAwTVdNeUxUbG1Nall0TXprMU5UaGlZVGxqTVRZdw','_fbp': 'fb.1.1660563975071.1661300353','__gads': 'ID=78680b1cbbbf5967-226ff9b598d50003:T=1660563974:S=ALNI_MbPSh55ZGjjYPCO-vf5fGNb1xl9mA','__gpi': 'UID=000008a27b184216:T=1660563974:RT=1669948000:S=ALNI_MaPxVrkjwXAfryySrPqq-p8middxA','ki_t': '1660563977884%3B1669955058092%3B1669968070296%3B40%3B506','ki_r': '','G_ENABLED_IDPS': 'google','ki_u': '39b3f4e3-5233-baf0-60d8-377c','ki_s': '200550%3A0.0.0.0.0%3B213982%3A0.0.0.0.0%3B213985%3A0.0.0.0.0%3B218147%3A1.0.0.0.2%3B220996%3A5.0.0.0.2%3B221866%3A8.0.0.1.2','uc': '8013A8318C98C517A1E3210FFD1F05F398C9D2152F0180DC768A742F3472FB8F427D6A68FB38F2B1B28726BCFCF3A5954B227C87A60D51481D1C99ABCCBA75AD66D19FE28C0B9437C4766BD65F74E0B46F6E94CF18AD31214A49501A582048A16FE6B0F83C6B85B3C9FFCD329729BBAA9F99A0D3FE413F66C05C4B1C4BD73D458FA62D117D89E5FA78073142BB7E0B2B','indeedCtk': '1gf52i3r8klue801','__ssid': '0a8acb351d281c10c620a288c56363a','amp_bfd0a9': 'Agxe0RnZH4zv2FhCIK-exg.MjAxODE3MjA1..1gj8tkt1i.1gj8tkt1j.eb.f.eq','g_state': '{"i_p":1668045731155,"i_l":2}','_mkto_trk': 'id:899-LOT-464&token:_mch-glassdoor.com-1665544065924-80651','_clck': 'jkevrs|1|f5n|0','_gd_visitor': '6e3ef52c-f45a-4320-8d17-bb614fa84616','drift_aid': 'f5932956-b73b-4db3-959a-fd4f32954817','driftt_aid': 'f5932956-b73b-4db3-959a-fd4f32954817','_uetvid': '0a87869049db11edafbc774fa84becf9','known_by_marketo_email': 'info@crawler.pro.vn','cf_clearance': '1w7nyXwpo5saifk5sd4VlUaE4p.FMtyJvAUNgGzHxg4-1666089495-0-150','rl_session': 'RudderEncrypt%3AU2FsdGVkX1854oaamh349nG1zxS6W5eEL34lSm7x8oc7ULhTveUnDs76D7%2Bj99Z%2BvrCiNcnZ0El0DnViSsJEset3jYwy7WMjJGYZ3Ou3uUYgQyiFBk6R2eVOXSR8j7zCm19s6cQHGMrEesB2fsNYlA%3D%3D','rl_user_id': 'RudderEncrypt%3AU2FsdGVkX19C21PpLg7OcsWl0FAakh0tjH3K%2BzJoCrk%3D','rl_trait': 'RudderEncrypt%3AU2FsdGVkX19C7wEZN0vXb7xfAZzWcByHJhg3iaRg2qfuHshL5rDVvvWmqX481%2FifYXxaBH87LK%2FmeFK2zxywDAB5SLY1Q1cJFfnt18N1h6Ughzi1mfqDEF5R5%2FQEN0IAVN0rD%2Fcr%2FNy%2FJJfcz673t1jtjgiamM8NYGFWtyGBZb6a%2F57UM55FvBmKsNQ3j3EmWAXGS%2BKdcXJYl4dPDFY%2BHQ%3D%3D','rl_group_id': 'RudderEncrypt%3AU2FsdGVkX1%2B3T6k3XL1Mkr%2FBFCAMrzD4x3igKYEZR0k%3D','rl_group_trait': 'RudderEncrypt%3AU2FsdGVkX19MhciCPUUcBRlgsgYnIShJiSbzvq6x%2FMI%3D','rl_anonymous_id': 'RudderEncrypt%3AU2FsdGVkX1%2Bsiv45NvfHavtH%2B0P964g8EAXnQURWMzOBJ3aM1GtvYa24XcdOvnf1rkK27XDfJSPlbGEQO82KmQ%3D%3D','rl_page_init_referrer': 'RudderEncrypt%3AU2FsdGVkX19nB6CLLPK31ucf0vWsT32CnDMkVRAXLUw%3D','rl_page_init_referring_domain': 'RudderEncrypt%3AU2FsdGVkX19tUqwmVfuix2Q92U3E6WYX7qhZhrzXvl0%3D','AWSALB': 'AlmKaHLE2LLYEcu/226ZsoeRAXzrOBshTwtNChDQ2iUsNuIK4UNk00LFYnS6G0UklHUOpe9xED6E7NtWlwZYkTN5YI/OCXMsS7iJ/lXPSyWlOgEZoDeX81t9m44nnYy6Sl6B3BPsypM6idVITwOJ+ITxRBd+PrXS+Y+8vbAQGI6lZS58EFTONH+biTDliw==','AWSALBCORS': 'AlmKaHLE2LLYEcu/226ZsoeRAXzrOBshTwtNChDQ2iUsNuIK4UNk00LFYnS6G0UklHUOpe9xED6E7NtWlwZYkTN5YI/OCXMsS7iJ/lXPSyWlOgEZoDeX81t9m44nnYy6Sl6B3BPsypM6idVITwOJ+ITxRBd+PrXS+Y+8vbAQGI6lZS58EFTONH+biTDliw==','at': 'ICMXbTSFbh_dNC5deXSX6Bzp4BxQuPQUY9T1n5HIzuDB7Nj2sRz2EoOFn2QNESJCXUCl7J53NzP580dDDKCPm1__3mnm8SstqcO4EiTMopgV8gmMqsSx0wcfVfIkEQL5wazQbbXg_-XvtVj3p_c4l1k8maPsMQ2wbKISoHddjbfOPlzWczrJMBDyjvGaTfEKE6vO0CXMwubM4uSc67UF5nNfplU-aythsOY6M0fH_EDaNKZrPld8zwhVKB8WMXSne8RenVE_oX2EF_EAi4oqoTq-RvY_yxgUrMcPgdqDCvIE74lH2mlF6RYvDxdtbMNvi8sQjJLicWtY0B2rcs0kXTskc2zWnmXisYLR2K1hlRinoAcb_zU99ihu9eRp4sNITBRAFweSFJ_siq8QkktwzEr1K3ouZXY2MKHHHflWNqwhmmRfAA5c0BLVNr8p0fInEKeZ_0XR6AMLSPBDaExCO6im6G5y5r7zWiIPuPK4Ou-GWD9h268avTen1x4oZBx0Egnt460DyoNf4-pOB8KjYhZAnVV3G7z2tvuFeH11VGQFWS-0BuTBa0I6y3SPVr1psWB7gHeXXKYplYJQOcbMhK_0xptfw7Mdlev8_RJRCv3uRm2FeabeZcRMMuTGDHP8kXCUnokP2CtESpeuRNZiwyfie41Hm_67CJKUyndR1yO2QNqG0VMC0nvrFhn8ggMAfPiD1Iu6P4pwRgP7G8WbGC7akpwLUajoR9K3JSGTRpPwirSEAZ7Sc9UaMmp9OQMHwOniMtmmvWmtgXInekTm9sNeo5AWZQjgq7igyo2QBcD_7YhGpV67Xxb6ycl3ZZGsdiKkPUMg35O02bcj0gYQ-ie297y10gLNySZegBHkQz163-bfn6c6cyClr3bnrA','_gcl_au': '1.1.1794617645.1668565669','_gid': 'GA1.2.1464605064.1669905739','ln_or': 'd','ht': '%7B%22quantcast%22%3A%5B%22D%22%5D%7D','JSESSIONID': '7FBFEE3D25FA3F2711AA4B80828C28FB','GSESSIONID': 'dd21d13b-9a0b-420f-ad00-bbcac501d232+1669946451367','cass': '1','gdsid': '1669946451367:1669968050954:997BB8A42BC6C4D66100D22B7B471608','JSESSIONID_PC_APP': '1A2D5299E197517E236D8AAF25BACB6C','fpvc': '12','_dc_gtm_UA-2595786-1': '1','__cf_bm': 'n1e2_CtNxwXVi5WRIXLElO_w72CdYZc84mexfaq0K9w-1669968049-0-AS7REY3uX6saX6kRGNJdN8CmNjnJXizIj11rdq95/b6VUYDx6VunYQZJGJVnwQn7aU/yU0OWs8A/cpTYfUgRxUk=','asst': '1669968049.0','bs': '4BMhroqZjWg98DtOT8HfZw:M6uuzE6P4SrDrfyqaBoUyEapYIwgwtd8dnosjB4cpud5Hn8_8ijQMEyYx_lSgPoESWgpfBnLVnqdg_JAp94qDddshlcxqTSlWtG0-ogXTUo:aPtcZ05JHDshMK3lMQvzOmtAyF5mZmIUTnjh9YPF4cw','SameSite': 'None','ADRUM_BTa': 'R:26|g:b40b1d47-870b-4544-8f37-2082be99a41a|n:glassdoor_17d346a0-2ec1-4454-86b0-73b3b787aee9',}
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0','Accept': '*/*','Accept-Language': 'en-GB,en;q=0.5','Content-Type': 'application/json','Referer': 'https://www.glassdoor.com/','gd-csrf-token': 'Kdj2yGRC-K5QEYWN5ieTag:JRmXg1j4HLASlGKHrbhMS8hqlVy9JAv6oGHujnKm6QaaNHJOyIwvT-3xTuAh6HO_BIy-gLmLcfBoskNSysP8jQ:8emQ9rFO3WvhSSGtCQtQASRAWRMTW6llWQRa7l9YqWk','x-gd-dos2-experiments-json': '{"content_indeed":{"treatment":"apply_t1","experiment":"PROD_test","params":{"apply":"true"}}}','apollographql-client-name': 'salaries','apollographql-client-version': '9.8.115-proxy-hotfix.1','Origin': 'https://www.glassdoor.com','Sec-Fetch-Dest': 'empty','Sec-Fetch-Mode': 'cors','Sec-Fetch-Site': 'same-origin','Connection': 'keep-alive','Alt-Used': 'www.glassdoor.com',}
    if os.path.exists('../glassdoor_review_2022/headers.json'):
        f=open('../glassdoor_review_2022/headers.json','r')
        headers_str=json.loads(f.read())
        f.close()
        for k,v in headers_str.items():
            if k in headers:
                headers[k]=v
    if os.path.exists('../glassdoor_review_2022/cookies.json'):
        f=open('../glassdoor_review_2022/cookies.json','r')
        cookies_str=json.loads(f.read())
        f.close()
        for k,v in cookies_str.items():
            if k in cookies:
                cookies[k]=v
    START=0 # 9384 -> 750
    LIMIT=1
    if os.path.exists('CRAWLED.txt'):
        START=int(open('CRAWLED.txt').read())
    WRITE=False
    def get_cookies(self):
        CHK=False
        while CHK==False:
            options = webdriver.FirefoxOptions()
            options.add_argument("--headless")
            driver = webdriver.Firefox(options=options,executable_path=GeckoDriverManager().install())
            #driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())
            driver.maximize_window()
            driver.get('https://www.glassdoor.com/employers/')
            time.sleep(3)
            driver.find_element_by_xpath('//a[@aria-label="Sign In"]').click()
            time.sleep(2)
            driver.find_element_by_xpath('//input[@id="userEmail"]').send_keys(GLASSDOOR_USER)
            driver.find_element_by_xpath('//input[@id="userPassword"]').send_keys(GLASSDOOR_PASSWORD)
            time.sleep(2)
            driver.find_element_by_xpath('//button[contains(@class,"minWidthBtn")]').click()
            time.sleep(3)
            driver.get('https://www.glassdoor.com/Salary/Amazon-Salaries-E6036.htm')
            time.sleep(3)
            if 'lib__EIFilterModuleStyles__clearAll' in driver.page_source:
                driver.find_element_by_xpath('//a[contains(@class,"lib__EIFilterModuleStyles__clearAll")]').click()
                time.sleep(8)
            TOKEN=str(driver.page_source).split('"gdToken":"')
            TOKEN=str(TOKEN[len(TOKEN)-1]).split('"')[0]
            self.headers['gd-csrf-token']=TOKEN
            COOKIES=driver.get_cookies()
            for row in COOKIES:
                if row['name'] in self.cookies:
                    self.cookies[row['name']]=row['value']
            ID=6036
            json_data = [{'operationName': 'EiSalariesGraphQuery','variables': {'cityId': None,'countryId': None,'domain': 'glassdoor.com','employerId': ID,'getLocations': True,'goc': 0,'jobTitle': '','locale': 'en-US','metroId': None,'pageNum': 1,'pageSize': 20,'sortType': 'COUNT','stateId': None,'payPeriod': None,'viewAsPayPeriodId': 'ANNUAL','useUgcSearch2ForSalaries': 'false','enableSalaryEstimates': False,'enableV3Estimates': True,},'query': 'query EiSalariesGraphQuery($employerId: Int!, $cityId: Int, $metroId: Int, $goc: Int, $stateId: Int, $countryId: Int, $jobTitle: String!, $pageNum: Int!, $sortType: SalariesSortOrderEnum, $employmentStatuses: [SalariesEmploymentStatusEnum], $domain: String, $locale: String, $gdId: String, $ip: String, $userId: Int, $payPeriod: PayPeriodEnum, $viewAsPayPeriodId: PayPeriodEnum, $useUgcSearch2ForSalaries: String, $enableSalaryEstimates: Boolean, $enableV3Estimates: Boolean) {\n  employmentStatusEnums(context: {domain: $domain}) {\n    values\n    __typename\n  }\n  salariesByEmployer(\n    goc: {sgocId: $goc}\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    page: {num: $pageNum, size: 20}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n    payPeriod: $payPeriod\n    employmentStatuses: $employmentStatuses\n    sort: $sortType\n    viewAsPayPeriodId: $viewAsPayPeriodId\n    enableSalaryEstimates: $enableSalaryEstimates\n    enableV3Estimates: $enableV3Estimates\n  ) {\n    salaryCount\n    filteredSalaryCount\n    pages\n    mostRecent\n    jobTitleCount\n    filteredJobTitleCount\n    seoTexts {\n      salarySeoDescriptionText\n      salarySeoDescriptionTitle\n      salarySeoDescriptionBody\n      __typename\n    }\n    lashedJobTitle {\n      text\n      __typename\n    }\n    queryLocation {\n      id\n      type\n      name\n      shortName\n      __typename\n    }\n    queryEmployer {\n      shortName\n      __typename\n    }\n    results {\n      salaryEstimatesFromJobListings\n      currency {\n        code\n        __typename\n      }\n      employer {\n        shortName\n        squareLogoUrl\n        id\n        counts {\n          globalJobCount {\n            jobCount\n            __typename\n          }\n          __typename\n        }\n        links {\n          jobsUrl\n          __typename\n        }\n        __typename\n      }\n      jobTitle {\n        id\n        text\n        __typename\n      }\n      obscuring\n      payPeriod\n      count\n      employerTotalCount\n      employmentStatus\n      minBasePay\n      medianBasePay\n      maxBasePay\n      totalCompMin\n      totalCompMax\n      totalCompMedian\n      totalAdditionalCashPayMin\n      totalAdditionalCashPayMax\n      totalAdditionalCashPayMedian\n      links {\n        employerSalariesByCompanyLogoUrl\n        employerSalariesAllLocationsInfositeUrl\n        employerSalariesInfositeUrl\n        __typename\n      }\n      totalCompPercentiles {\n        ident\n        value\n        __typename\n      }\n      totalPayInsights {\n        isHigh\n        percentage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  salaryLocations(\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n  ) {\n    countries {\n      id\n      identString\n      name\n      salaryCount\n      currency {\n        symbol\n        __typename\n      }\n      states {\n        id\n        identString\n        name\n        salaryCount\n        metros {\n          id\n          identString\n          name\n          salaryCount\n          cities {\n            id\n            identString\n            name\n            salaryCount\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n',},]
            response = requests.post('https://www.glassdoor.com/graph', headers=self.headers,cookies=self.cookies, json=json_data)
            try:
                DATA=json.loads(response.text)
                print('Cookies is OK')
                f=open('headers.json','w')
                f.write(json.dumps(self.headers))
                f.close()
                f=open('cookies.json','w')
                f.write(json.dumps(self.cookies))
                f.close()
                CHK=True
                driver.close()
                return True
            except:
                print('Can not get reponse, please try to re-run !!!')
                driver.close()
    def parse(self,response):
        ID=6036
        json_data = [{'operationName': 'EiSalariesGraphQuery','variables': {'cityId': None,'countryId': None,'domain': 'glassdoor.com','employerId': ID,'getLocations': True,'goc': 0,'jobTitle': '','locale': 'en-US','metroId': None,'pageNum': 1,'pageSize': 20,'sortType': 'COUNT','stateId': None,'payPeriod': None,'viewAsPayPeriodId': 'ANNUAL','useUgcSearch2ForSalaries': 'false','enableSalaryEstimates': False,'enableV3Estimates': True,},'query': 'query EiSalariesGraphQuery($employerId: Int!, $cityId: Int, $metroId: Int, $goc: Int, $stateId: Int, $countryId: Int, $jobTitle: String!, $pageNum: Int!, $sortType: SalariesSortOrderEnum, $employmentStatuses: [SalariesEmploymentStatusEnum], $domain: String, $locale: String, $gdId: String, $ip: String, $userId: Int, $payPeriod: PayPeriodEnum, $viewAsPayPeriodId: PayPeriodEnum, $useUgcSearch2ForSalaries: String, $enableSalaryEstimates: Boolean, $enableV3Estimates: Boolean) {\n  employmentStatusEnums(context: {domain: $domain}) {\n    values\n    __typename\n  }\n  salariesByEmployer(\n    goc: {sgocId: $goc}\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    page: {num: $pageNum, size: 20}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n    payPeriod: $payPeriod\n    employmentStatuses: $employmentStatuses\n    sort: $sortType\n    viewAsPayPeriodId: $viewAsPayPeriodId\n    enableSalaryEstimates: $enableSalaryEstimates\n    enableV3Estimates: $enableV3Estimates\n  ) {\n    salaryCount\n    filteredSalaryCount\n    pages\n    mostRecent\n    jobTitleCount\n    filteredJobTitleCount\n    seoTexts {\n      salarySeoDescriptionText\n      salarySeoDescriptionTitle\n      salarySeoDescriptionBody\n      __typename\n    }\n    lashedJobTitle {\n      text\n      __typename\n    }\n    queryLocation {\n      id\n      type\n      name\n      shortName\n      __typename\n    }\n    queryEmployer {\n      shortName\n      __typename\n    }\n    results {\n      salaryEstimatesFromJobListings\n      currency {\n        code\n        __typename\n      }\n      employer {\n        shortName\n        squareLogoUrl\n        id\n        counts {\n          globalJobCount {\n            jobCount\n            __typename\n          }\n          __typename\n        }\n        links {\n          jobsUrl\n          __typename\n        }\n        __typename\n      }\n      jobTitle {\n        id\n        text\n        __typename\n      }\n      obscuring\n      payPeriod\n      count\n      employerTotalCount\n      employmentStatus\n      minBasePay\n      medianBasePay\n      maxBasePay\n      totalCompMin\n      totalCompMax\n      totalCompMedian\n      totalAdditionalCashPayMin\n      totalAdditionalCashPayMax\n      totalAdditionalCashPayMedian\n      links {\n        employerSalariesByCompanyLogoUrl\n        employerSalariesAllLocationsInfositeUrl\n        employerSalariesInfositeUrl\n        __typename\n      }\n      totalCompPercentiles {\n        ident\n        value\n        __typename\n      }\n      totalPayInsights {\n        isHigh\n        percentage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  salaryLocations(\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n  ) {\n    countries {\n      id\n      identString\n      name\n      salaryCount\n      currency {\n        symbol\n        __typename\n      }\n      states {\n        id\n        identString\n        name\n        salaryCount\n        metros {\n          id\n          identString\n          name\n          salaryCount\n          cities {\n            id\n            identString\n            name\n            salaryCount\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n',},]
        response = requests.post('https://www.glassdoor.com/graph', headers=self.headers,cookies=self.cookies, json=json_data)
        try:
            DATA=json.loads(response.text)
            print('Cookies is OK')
        except:
            self.get_cookies()
        #for i in range(len(self.LIST)):
        for i in range(self.START,self.START+self.LIMIT):
            LS=self.LIST[i]
            if '~' in LS:
                LS=str(LS).split('~')[1]
            if 'glassdoor.com' in str(LS) and '/Salaries/' in str(LS):
                yield scrapy.Request(LS,callback=self.parse_list,headers=self.headers,cookies=self.cookies)
            elif 'glassdoor.com' in str(LS) and ('/Salary/' in str(LS) or '/Overview/' in str(LS) or '/Compare/' in str(LS) or '/Reviews/' in str(LS) or '/Jobs/' in str(LS) or '/Benefits/' in str(LS) or '/Interview/' in str(LS)):
                STR=re.split('_E|-EI|_IE|-E', str(LS))
                STR=STR[len(STR)-1]
                try:
                    ID=int(Get_Number(re.split('\.|\_', str(STR))[0]))
                    self.headers['referer']=LS
                    json_data = [{'operationName': 'EiSalariesGraphQuery','variables': {'cityId': None,'countryId': None,'domain': 'glassdoor.com','employerId': ID,'getLocations': True,'goc': 0,'jobTitle': '','locale': 'en-US','metroId': None,'pageNum': 1,'pageSize': 20,'sortType': 'COUNT','stateId': None,'payPeriod': None,'viewAsPayPeriodId': 'ANNUAL','useUgcSearch2ForSalaries': 'false','enableSalaryEstimates': False,'enableV3Estimates': True,},'query': 'query EiSalariesGraphQuery($employerId: Int!, $cityId: Int, $metroId: Int, $goc: Int, $stateId: Int, $countryId: Int, $jobTitle: String!, $pageNum: Int!, $sortType: SalariesSortOrderEnum, $employmentStatuses: [SalariesEmploymentStatusEnum], $domain: String, $locale: String, $gdId: String, $ip: String, $userId: Int, $payPeriod: PayPeriodEnum, $viewAsPayPeriodId: PayPeriodEnum, $useUgcSearch2ForSalaries: String, $enableSalaryEstimates: Boolean, $enableV3Estimates: Boolean) {\n  employmentStatusEnums(context: {domain: $domain}) {\n    values\n    __typename\n  }\n  salariesByEmployer(\n    goc: {sgocId: $goc}\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    page: {num: $pageNum, size: 20}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n    payPeriod: $payPeriod\n    employmentStatuses: $employmentStatuses\n    sort: $sortType\n    viewAsPayPeriodId: $viewAsPayPeriodId\n    enableSalaryEstimates: $enableSalaryEstimates\n    enableV3Estimates: $enableV3Estimates\n  ) {\n    salaryCount\n    filteredSalaryCount\n    pages\n    mostRecent\n    jobTitleCount\n    filteredJobTitleCount\n    seoTexts {\n      salarySeoDescriptionText\n      salarySeoDescriptionTitle\n      salarySeoDescriptionBody\n      __typename\n    }\n    lashedJobTitle {\n      text\n      __typename\n    }\n    queryLocation {\n      id\n      type\n      name\n      shortName\n      __typename\n    }\n    queryEmployer {\n      shortName\n      __typename\n    }\n    results {\n      salaryEstimatesFromJobListings\n      currency {\n        code\n        __typename\n      }\n      employer {\n        shortName\n        squareLogoUrl\n        id\n        counts {\n          globalJobCount {\n            jobCount\n            __typename\n          }\n          __typename\n        }\n        links {\n          jobsUrl\n          __typename\n        }\n        __typename\n      }\n      jobTitle {\n        id\n        text\n        __typename\n      }\n      obscuring\n      payPeriod\n      count\n      employerTotalCount\n      employmentStatus\n      minBasePay\n      medianBasePay\n      maxBasePay\n      totalCompMin\n      totalCompMax\n      totalCompMedian\n      totalAdditionalCashPayMin\n      totalAdditionalCashPayMax\n      totalAdditionalCashPayMedian\n      links {\n        employerSalariesByCompanyLogoUrl\n        employerSalariesAllLocationsInfositeUrl\n        employerSalariesInfositeUrl\n        __typename\n      }\n      totalCompPercentiles {\n        ident\n        value\n        __typename\n      }\n      totalPayInsights {\n        isHigh\n        percentage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  salaryLocations(\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n  ) {\n    countries {\n      id\n      identString\n      name\n      salaryCount\n      currency {\n        symbol\n        __typename\n      }\n      states {\n        id\n        identString\n        name\n        salaryCount\n        metros {\n          id\n          identString\n          name\n          salaryCount\n          cities {\n            id\n            identString\n            name\n            salaryCount\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n',},]
                    yield scrapy.Request('https://www.glassdoor.com/graph',callback=self.parse_content,method="POST",body=json.dumps(json_data),meta={'json_data':json_data,'LS':LS},headers=self.headers,cookies=self.cookies,dont_filter=True)
                except:
                    open('err_list.txt','a').write(LS+'\n')
            elif 'glassdoor.com' in str(LS):
                yield scrapy.Request(LS,callback=self.parse_getlink,headers=self.headers,cookies=self.cookies)
            else:
                open('err_list.txt','a').write(LS+'\n')
    def parse_getlink(self,response):
        urls=response.xpath('//a[@data-label="Salaries"]/@href').getall()
        for LS in urls:
            STR=re.split('_E|-EI|_IE|-E', str(LS))
            STR=STR[len(STR)-1]
            try:
                ID=int(Get_Number(re.split('\.|\_', str(STR))[0]))
                self.headers['referer']=LS
                json_data = [{'operationName': 'EiSalariesGraphQuery','variables': {'cityId': None,'countryId': None,'domain': 'glassdoor.com','employerId': ID,'getLocations': True,'goc': 0,'jobTitle': '','locale': 'en-US','metroId': None,'pageNum': 1,'pageSize': 20,'sortType': 'COUNT','stateId': None,'payPeriod': None,'viewAsPayPeriodId': 'ANNUAL','useUgcSearch2ForSalaries': 'false','enableSalaryEstimates': False,'enableV3Estimates': True,},'query': 'query EiSalariesGraphQuery($employerId: Int!, $cityId: Int, $metroId: Int, $goc: Int, $stateId: Int, $countryId: Int, $jobTitle: String!, $pageNum: Int!, $sortType: SalariesSortOrderEnum, $employmentStatuses: [SalariesEmploymentStatusEnum], $domain: String, $locale: String, $gdId: String, $ip: String, $userId: Int, $payPeriod: PayPeriodEnum, $viewAsPayPeriodId: PayPeriodEnum, $useUgcSearch2ForSalaries: String, $enableSalaryEstimates: Boolean, $enableV3Estimates: Boolean) {\n  employmentStatusEnums(context: {domain: $domain}) {\n    values\n    __typename\n  }\n  salariesByEmployer(\n    goc: {sgocId: $goc}\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    page: {num: $pageNum, size: 20}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n    payPeriod: $payPeriod\n    employmentStatuses: $employmentStatuses\n    sort: $sortType\n    viewAsPayPeriodId: $viewAsPayPeriodId\n    enableSalaryEstimates: $enableSalaryEstimates\n    enableV3Estimates: $enableV3Estimates\n  ) {\n    salaryCount\n    filteredSalaryCount\n    pages\n    mostRecent\n    jobTitleCount\n    filteredJobTitleCount\n    seoTexts {\n      salarySeoDescriptionText\n      salarySeoDescriptionTitle\n      salarySeoDescriptionBody\n      __typename\n    }\n    lashedJobTitle {\n      text\n      __typename\n    }\n    queryLocation {\n      id\n      type\n      name\n      shortName\n      __typename\n    }\n    queryEmployer {\n      shortName\n      __typename\n    }\n    results {\n      salaryEstimatesFromJobListings\n      currency {\n        code\n        __typename\n      }\n      employer {\n        shortName\n        squareLogoUrl\n        id\n        counts {\n          globalJobCount {\n            jobCount\n            __typename\n          }\n          __typename\n        }\n        links {\n          jobsUrl\n          __typename\n        }\n        __typename\n      }\n      jobTitle {\n        id\n        text\n        __typename\n      }\n      obscuring\n      payPeriod\n      count\n      employerTotalCount\n      employmentStatus\n      minBasePay\n      medianBasePay\n      maxBasePay\n      totalCompMin\n      totalCompMax\n      totalCompMedian\n      totalAdditionalCashPayMin\n      totalAdditionalCashPayMax\n      totalAdditionalCashPayMedian\n      links {\n        employerSalariesByCompanyLogoUrl\n        employerSalariesAllLocationsInfositeUrl\n        employerSalariesInfositeUrl\n        __typename\n      }\n      totalCompPercentiles {\n        ident\n        value\n        __typename\n      }\n      totalPayInsights {\n        isHigh\n        percentage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  salaryLocations(\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n  ) {\n    countries {\n      id\n      identString\n      name\n      salaryCount\n      currency {\n        symbol\n        __typename\n      }\n      states {\n        id\n        identString\n        name\n        salaryCount\n        metros {\n          id\n          identString\n          name\n          salaryCount\n          cities {\n            id\n            identString\n            name\n            salaryCount\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n',},]
                yield scrapy.Request('https://www.glassdoor.com/graph',callback=self.parse_content,method="POST",body=json.dumps(json_data),meta={'json_data':json_data,'LS':LS},headers=self.headers,cookies=self.cookies,dont_filter=True)
            except:
                open('err_list.txt','a').write(LS+'\n')
    def parse_list(self,response):
        COMS=response.xpath('//div[contains(@data-test,"salaries-list-item-")]')
        for coms in COMS:
            LS=self.start_urls[0]+coms.xpath('.//a[contains(@href,"/rf/")]/@href').get()
            STR=re.split('_E|-EI|_IE|-E', str(LS))
            STR=STR[len(STR)-1]
            try:
                ID=int(Get_Number(re.split('\.|\_', str(STR))[0]))
                self.headers['referer']=LS
                json_data = [{'operationName': 'EiSalariesGraphQuery','variables': {'cityId': None,'countryId': None,'domain': 'glassdoor.com','employerId': ID,'getLocations': True,'goc': 0,'jobTitle': '','locale': 'en-US','metroId': None,'pageNum': 1,'pageSize': 20,'sortType': 'COUNT','stateId': None,'payPeriod': None,'viewAsPayPeriodId': 'ANNUAL','useUgcSearch2ForSalaries': 'false','enableSalaryEstimates': False,'enableV3Estimates': True,},'query': 'query EiSalariesGraphQuery($employerId: Int!, $cityId: Int, $metroId: Int, $goc: Int, $stateId: Int, $countryId: Int, $jobTitle: String!, $pageNum: Int!, $sortType: SalariesSortOrderEnum, $employmentStatuses: [SalariesEmploymentStatusEnum], $domain: String, $locale: String, $gdId: String, $ip: String, $userId: Int, $payPeriod: PayPeriodEnum, $viewAsPayPeriodId: PayPeriodEnum, $useUgcSearch2ForSalaries: String, $enableSalaryEstimates: Boolean, $enableV3Estimates: Boolean) {\n  employmentStatusEnums(context: {domain: $domain}) {\n    values\n    __typename\n  }\n  salariesByEmployer(\n    goc: {sgocId: $goc}\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    page: {num: $pageNum, size: 20}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n    payPeriod: $payPeriod\n    employmentStatuses: $employmentStatuses\n    sort: $sortType\n    viewAsPayPeriodId: $viewAsPayPeriodId\n    enableSalaryEstimates: $enableSalaryEstimates\n    enableV3Estimates: $enableV3Estimates\n  ) {\n    salaryCount\n    filteredSalaryCount\n    pages\n    mostRecent\n    jobTitleCount\n    filteredJobTitleCount\n    seoTexts {\n      salarySeoDescriptionText\n      salarySeoDescriptionTitle\n      salarySeoDescriptionBody\n      __typename\n    }\n    lashedJobTitle {\n      text\n      __typename\n    }\n    queryLocation {\n      id\n      type\n      name\n      shortName\n      __typename\n    }\n    queryEmployer {\n      shortName\n      __typename\n    }\n    results {\n      salaryEstimatesFromJobListings\n      currency {\n        code\n        __typename\n      }\n      employer {\n        shortName\n        squareLogoUrl\n        id\n        counts {\n          globalJobCount {\n            jobCount\n            __typename\n          }\n          __typename\n        }\n        links {\n          jobsUrl\n          __typename\n        }\n        __typename\n      }\n      jobTitle {\n        id\n        text\n        __typename\n      }\n      obscuring\n      payPeriod\n      count\n      employerTotalCount\n      employmentStatus\n      minBasePay\n      medianBasePay\n      maxBasePay\n      totalCompMin\n      totalCompMax\n      totalCompMedian\n      totalAdditionalCashPayMin\n      totalAdditionalCashPayMax\n      totalAdditionalCashPayMedian\n      links {\n        employerSalariesByCompanyLogoUrl\n        employerSalariesAllLocationsInfositeUrl\n        employerSalariesInfositeUrl\n        __typename\n      }\n      totalCompPercentiles {\n        ident\n        value\n        __typename\n      }\n      totalPayInsights {\n        isHigh\n        percentage\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  salaryLocations(\n    employer: {id: $employerId}\n    jobTitle: {text: $jobTitle}\n    location: {cityId: $cityId, metroId: $metroId, stateId: $stateId, countryId: $countryId}\n    context: {domain: $domain, locale: $locale, gdId: $gdId, ip: $ip, userId: $userId, params: [{key: "useUgcSearch2", value: $useUgcSearch2ForSalaries}]}\n  ) {\n    countries {\n      id\n      identString\n      name\n      salaryCount\n      currency {\n        symbol\n        __typename\n      }\n      states {\n        id\n        identString\n        name\n        salaryCount\n        metros {\n          id\n          identString\n          name\n          salaryCount\n          cities {\n            id\n            identString\n            name\n            salaryCount\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n',},]
                yield scrapy.Request('https://www.glassdoor.com/graph',callback=self.parse_content,method="POST",body=json.dumps(json_data),meta={'json_data':json_data,'LS':LS},headers=self.headers,cookies=self.cookies,dont_filter=True)
            except:
                open('err_list.txt','a').write(LS+'\n')
    def parse_content(self,response):
        if response.status<400 and self.WRITE==False:
            open('CRAWLED.txt','w').write(str(self.START+self.LIMIT))
            self.WRITE=True
        json_data=response.meta['json_data']
        LS=response.meta['LS']
        DATA=json.loads(response.text)
        Data=DATA[0]['data']['salariesByEmployer']
        if not Data is None and 'results' in Data and not Data['results'] is None:
            i=0
            for row in Data['results']:
                i+=1
                item={}
                item['Company']=Data['queryEmployer']['shortName']
                item['Job Title']=row['jobTitle']['text']
                item['Salaries Submitted']=row['count']
                item['Total Pay']=int(row['totalCompMedian'])
                item['Base Pay']=int(row['medianBasePay'])
                item['Additional Pay']=int(row['totalAdditionalCashPayMedian'])
                item['Lower Pay Range']=0
                item['Higher Pay Range']=0
                for rs in row['totalCompPercentiles']:
                    if rs['ident']=='P25':
                        item['Lower Pay Range']=int(rs['value'])
                    if rs['ident']=='P75':
                        item['Higher Pay Range']=int(rs['value'])
                item['KEY_']=key_MD5(row['links']['employerSalariesAllLocationsInfositeUrl'])
                #item['KEY_']=key_MD5(item['Company'])+'_'+str(json_data[0]['variables']['pageNum'])+'_'+str(i)
                yield(item)
            print(len(Data['results']),'=>',json_data[0]['variables']['pageNum'],'/',DATA[0]['data']['salariesByEmployer']['pages'])
            if json_data[0]['variables']['pageNum']<DATA[0]['data']['salariesByEmployer']['pages']:
                json_data[0]['variables']['pageNum']+=1
                print('NEXT PAGE:',json_data[0]['variables']['pageNum'])
                self.headers['referer']=LS
                yield scrapy.Request(response.url,callback=self.parse_content,method="POST",body=json.dumps(json_data),meta={'json_data':json_data,'LS':LS},headers=self.headers,cookies=self.cookies,dont_filter=True)
